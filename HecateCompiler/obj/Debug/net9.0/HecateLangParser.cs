//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\clion_projects\C#\HecateCompiler\HecateCompiler\HecateLang.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HecateCompiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class HecateLangParser : Parser {
	public const int
		INT=1, FLOAT=2, DOUBLE=3, STRING_TYPE=4, VOID=5, IF=6, ELSE=7, FOR=8, 
		WHILE=9, RETURN=10, ID=11, NUMBER=12, STRING=13, PLUS=14, MINUS=15, STAR=16, 
		SLASH=17, PLUS_PLUS=18, MINUS_MINUS=19, LT=20, GT=21, LE=22, GE=23, EQUAL=24, 
		NE=25, AND=26, OR=27, NOT=28, ASSIGN=29, PLUS_ASSIGN=30, MINUS_ASSIGN=31, 
		STAR_ASSIGN=32, SLASH_ASSIGN=33, LPAREN=34, RPAREN=35, LBRACE=36, RBRACE=37, 
		SEMICOLON=38, COMMA=39, COMMENT=40, BLOCK_COMMENT=41, WS=42;
	public const int
		RULE_program = 0, RULE_globalVar = 1, RULE_localVar = 2, RULE_function = 3, 
		RULE_parameters = 4, RULE_param = 5, RULE_statement = 6, RULE_assignment = 7, 
		RULE_ifStatement = 8, RULE_loop = 9, RULE_forInitialization = 10, RULE_forCondition = 11, 
		RULE_forIncrement = 12, RULE_incrementOrDecrement = 13, RULE_returnStatement = 14, 
		RULE_block = 15, RULE_expression = 16, RULE_term = 17, RULE_type = 18;
	public static readonly string[] ruleNames = {
		"program", "globalVar", "localVar", "function", "parameters", "param", 
		"statement", "assignment", "ifStatement", "loop", "forInitialization", 
		"forCondition", "forIncrement", "incrementOrDecrement", "returnStatement", 
		"block", "expression", "term", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'double'", "'string'", "'void'", "'if'", "'else'", 
		"'for'", "'while'", "'return'", null, null, null, "'+'", "'-'", "'*'", 
		"'/'", "'++'", "'--'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", 
		"'||'", "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'('", "')'", "'{'", 
		"'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "DOUBLE", "STRING_TYPE", "VOID", "IF", "ELSE", "FOR", 
		"WHILE", "RETURN", "ID", "NUMBER", "STRING", "PLUS", "MINUS", "STAR", 
		"SLASH", "PLUS_PLUS", "MINUS_MINUS", "LT", "GT", "LE", "GE", "EQUAL", 
		"NE", "AND", "OR", "NOT", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "STAR_ASSIGN", 
		"SLASH_ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", "COMMA", 
		"COMMENT", "BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HecateLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public HecateLangParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public GlobalVarContext[] globalVar() {
			return GetRuleContexts<GlobalVarContext>();
		}
		public GlobalVarContext globalVar(int i) {
			return GetRuleContext<GlobalVarContext>(i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING_TYPE) | (1L << VOID))) != 0)) {
				{
				State = 40;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 38; globalVar();
					}
					break;

				case 2:
					{
					State = 39; function();
					}
					break;
				}
				}
				State = 44;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HecateLangParser.ID, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(HecateLangParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterGlobalVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitGlobalVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarContext globalVar() {
		GlobalVarContext _localctx = new GlobalVarContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_globalVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; type();
			State = 46; Match(ID);
			State = 49;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 47; Match(ASSIGN);
				State = 48; expression();
				}
			}

			State = 51; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HecateLangParser.ID, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(HecateLangParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterLocalVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitLocalVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarContext localVar() {
		LocalVarContext _localctx = new LocalVarContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_localVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; type();
			State = 54; Match(ID);
			State = 57;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 55; Match(ASSIGN);
				State = 56; expression();
				}
			}

			State = 59; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HecateLangParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(HecateLangParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HecateLangParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; type();
			State = 62; Match(ID);
			State = 63; Match(LPAREN);
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING_TYPE) | (1L << VOID))) != 0)) {
				{
				State = 64; parameters();
				}
			}

			State = 67; Match(RPAREN);
			State = 68; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(HecateLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HecateLangParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; param();
			State = 75;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 71; Match(COMMA);
				State = 72; param();
				}
				}
				State = 77;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HecateLangParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; type();
			State = 79; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(HecateLangParser.SEMICOLON, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 88;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; assignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; ifStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83; loop();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 84; returnStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 85; expression();
				State = 86; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(HecateLangParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(HecateLangParser.SEMICOLON, 0); }
		public ITerminalNode ASSIGN() { return GetToken(HecateLangParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(HecateLangParser.PLUS_ASSIGN, 0); }
		public ITerminalNode MINUS_ASSIGN() { return GetToken(HecateLangParser.MINUS_ASSIGN, 0); }
		public ITerminalNode STAR_ASSIGN() { return GetToken(HecateLangParser.STAR_ASSIGN, 0); }
		public ITerminalNode SLASH_ASSIGN() { return GetToken(HecateLangParser.SLASH_ASSIGN, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(ID);
			State = 91;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << STAR_ASSIGN) | (1L << SLASH_ASSIGN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 92; expression();
			State = 93; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(HecateLangParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(HecateLangParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HecateLangParser.RPAREN, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(HecateLangParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(IF);
			State = 96; Match(LPAREN);
			State = 97; expression();
			State = 98; Match(RPAREN);
			State = 99; block();
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 100; Match(ELSE);
				State = 101; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(HecateLangParser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(HecateLangParser.LPAREN, 0); }
		public ForInitializationContext forInitialization() {
			return GetRuleContext<ForInitializationContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(HecateLangParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(HecateLangParser.SEMICOLON, i);
		}
		public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public ForIncrementContext forIncrement() {
			return GetRuleContext<ForIncrementContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HecateLangParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(HecateLangParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_loop);
		try {
			State = 120;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(FOR);
				State = 105; Match(LPAREN);
				State = 106; forInitialization();
				State = 107; Match(SEMICOLON);
				State = 108; forCondition();
				State = 109; Match(SEMICOLON);
				State = 110; forIncrement();
				State = 111; Match(RPAREN);
				State = 112; block();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; Match(WHILE);
				State = 115; Match(LPAREN);
				State = 116; expression();
				State = 117; Match(RPAREN);
				State = 118; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializationContext : ParserRuleContext {
		public LocalVarContext localVar() {
			return GetRuleContext<LocalVarContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IncrementOrDecrementContext incrementOrDecrement() {
			return GetRuleContext<IncrementOrDecrementContext>(0);
		}
		public ForInitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitialization; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterForInitialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitForInitialization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializationContext forInitialization() {
		ForInitializationContext _localctx = new ForInitializationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_forInitialization);
		try {
			State = 125;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; localVar();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; assignment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124; incrementOrDecrement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterForCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitForCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_forCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIncrementContext : ParserRuleContext {
		public IncrementOrDecrementContext incrementOrDecrement() {
			return GetRuleContext<IncrementOrDecrementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIncrement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterForIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitForIncrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIncrementContext forIncrement() {
		ForIncrementContext _localctx = new ForIncrementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_forIncrement);
		try {
			State = 131;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; incrementOrDecrement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementOrDecrementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(HecateLangParser.ID, 0); }
		public ITerminalNode PLUS_PLUS() { return GetToken(HecateLangParser.PLUS_PLUS, 0); }
		public ITerminalNode MINUS_MINUS() { return GetToken(HecateLangParser.MINUS_MINUS, 0); }
		public IncrementOrDecrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementOrDecrement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterIncrementOrDecrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitIncrementOrDecrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementOrDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementOrDecrementContext incrementOrDecrement() {
		IncrementOrDecrementContext _localctx = new IncrementOrDecrementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_incrementOrDecrement);
		try {
			State = 141;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; Match(ID);
				State = 134; Match(PLUS_PLUS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; Match(ID);
				State = 136; Match(MINUS_MINUS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 137; Match(PLUS_PLUS);
				State = 138; Match(ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 139; Match(MINUS_MINUS);
				State = 140; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(HecateLangParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(HecateLangParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(RETURN);
			State = 145;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUMBER) | (1L << STRING) | (1L << PLUS_PLUS) | (1L << MINUS_MINUS) | (1L << LPAREN))) != 0)) {
				{
				State = 144; expression();
				}
			}

			State = 147; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(HecateLangParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(HecateLangParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LocalVarContext[] localVar() {
			return GetRuleContexts<LocalVarContext>();
		}
		public LocalVarContext localVar(int i) {
			return GetRuleContext<LocalVarContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(LBRACE);
			State = 154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING_TYPE) | (1L << VOID) | (1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << RETURN) | (1L << ID) | (1L << NUMBER) | (1L << STRING) | (1L << PLUS_PLUS) | (1L << MINUS_MINUS) | (1L << LPAREN))) != 0)) {
				{
				State = 152;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case IF:
				case FOR:
				case WHILE:
				case RETURN:
				case ID:
				case NUMBER:
				case STRING:
				case PLUS_PLUS:
				case MINUS_MINUS:
				case LPAREN:
					{
					State = 150; statement();
					}
					break;
				case INT:
				case FLOAT:
				case DOUBLE:
				case STRING_TYPE:
				case VOID:
					{
					State = 151; localVar();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 156;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 157; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(HecateLangParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(HecateLangParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(HecateLangParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(HecateLangParser.MINUS, i);
		}
		public ITerminalNode[] STAR() { return GetTokens(HecateLangParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(HecateLangParser.STAR, i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(HecateLangParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(HecateLangParser.SLASH, i);
		}
		public ITerminalNode[] LT() { return GetTokens(HecateLangParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(HecateLangParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(HecateLangParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(HecateLangParser.GT, i);
		}
		public ITerminalNode[] LE() { return GetTokens(HecateLangParser.LE); }
		public ITerminalNode LE(int i) {
			return GetToken(HecateLangParser.LE, i);
		}
		public ITerminalNode[] GE() { return GetTokens(HecateLangParser.GE); }
		public ITerminalNode GE(int i) {
			return GetToken(HecateLangParser.GE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(HecateLangParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(HecateLangParser.EQUAL, i);
		}
		public ITerminalNode[] NE() { return GetTokens(HecateLangParser.NE); }
		public ITerminalNode NE(int i) {
			return GetToken(HecateLangParser.NE, i);
		}
		public ITerminalNode[] AND() { return GetTokens(HecateLangParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(HecateLangParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(HecateLangParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(HecateLangParser.OR, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(HecateLangParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(HecateLangParser.NOT, i);
		}
		public IncrementOrDecrementContext incrementOrDecrement() {
			return GetRuleContext<IncrementOrDecrementContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_expression);
		int _la;
		try {
			State = 168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159; term();
				State = 164;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << SLASH) | (1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << EQUAL) | (1L << NE) | (1L << AND) | (1L << OR) | (1L << NOT))) != 0)) {
					{
					{
					State = 160;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << SLASH) | (1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << EQUAL) | (1L << NE) | (1L << AND) | (1L << OR) | (1L << NOT))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 161; term();
					}
					}
					State = 166;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; incrementOrDecrement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(HecateLangParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(HecateLangParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(HecateLangParser.STRING, 0); }
		public ITerminalNode LPAREN() { return GetToken(HecateLangParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HecateLangParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(HecateLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HecateLangParser.COMMA, i);
		}
		public IncrementOrDecrementContext incrementOrDecrement() {
			return GetRuleContext<IncrementOrDecrementContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_term);
		int _la;
		try {
			State = 191;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; Match(NUMBER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; Match(STRING);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 173; Match(LPAREN);
				State = 174; expression();
				State = 175; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 177; Match(ID);
				State = 178; Match(LPAREN);
				State = 187;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUMBER) | (1L << STRING) | (1L << PLUS_PLUS) | (1L << MINUS_MINUS) | (1L << LPAREN))) != 0)) {
					{
					State = 179; expression();
					State = 184;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 180; Match(COMMA);
						State = 181; expression();
						}
						}
						State = 186;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 189; Match(RPAREN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 190; incrementOrDecrement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(HecateLangParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(HecateLangParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(HecateLangParser.DOUBLE, 0); }
		public ITerminalNode STRING_TYPE() { return GetToken(HecateLangParser.STRING_TYPE, 0); }
		public ITerminalNode VOID() { return GetToken(HecateLangParser.VOID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHecateLangListener typedListener = listener as IHecateLangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHecateLangVisitor<TResult> typedVisitor = visitor as IHecateLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING_TYPE) | (1L << VOID))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3,\xC6\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\a"+
		"\x2+\n\x2\f\x2\xE\x2.\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x34\n\x3\x3\x3"+
		"\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4<\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x5\x5\x44\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\a\x6L\n\x6"+
		"\f\x6\xE\x6O\v\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5"+
		"\b[\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5"+
		"\ni\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x5\v{\n\v\x3\f\x3\f\x3\f\x5\f\x80\n\f\x3\r\x3\r\x3\xE"+
		"\x3\xE\x5\xE\x86\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\x90\n\xF\x3\x10\x3\x10\x5\x10\x94\n\x10\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x11\a\x11\x9B\n\x11\f\x11\xE\x11\x9E\v\x11\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x12\a\x12\xA5\n\x12\f\x12\xE\x12\xA8\v\x12\x3\x12\x5\x12\xAB"+
		"\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\a\x13\xB9\n\x13\f\x13\xE\x13\xBC\v\x13\x5\x13\xBE"+
		"\n\x13\x3\x13\x3\x13\x5\x13\xC2\n\x13\x3\x14\x3\x14\x3\x14\x2\x2\x2\x15"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2\x2\x5\x3\x2\x1F#\x4\x2\x10\x13"+
		"\x16\x1E\x3\x2\x3\a\xD0\x2,\x3\x2\x2\x2\x4/\x3\x2\x2\x2\x6\x37\x3\x2\x2"+
		"\x2\b?\x3\x2\x2\x2\nH\x3\x2\x2\x2\fP\x3\x2\x2\x2\xEZ\x3\x2\x2\x2\x10\\"+
		"\x3\x2\x2\x2\x12\x61\x3\x2\x2\x2\x14z\x3\x2\x2\x2\x16\x7F\x3\x2\x2\x2"+
		"\x18\x81\x3\x2\x2\x2\x1A\x85\x3\x2\x2\x2\x1C\x8F\x3\x2\x2\x2\x1E\x91\x3"+
		"\x2\x2\x2 \x97\x3\x2\x2\x2\"\xAA\x3\x2\x2\x2$\xC1\x3\x2\x2\x2&\xC3\x3"+
		"\x2\x2\x2(+\x5\x4\x3\x2)+\x5\b\x5\x2*(\x3\x2\x2\x2*)\x3\x2\x2\x2+.\x3"+
		"\x2\x2\x2,*\x3\x2\x2\x2,-\x3\x2\x2\x2-\x3\x3\x2\x2\x2.,\x3\x2\x2\x2/\x30"+
		"\x5&\x14\x2\x30\x33\a\r\x2\x2\x31\x32\a\x1F\x2\x2\x32\x34\x5\"\x12\x2"+
		"\x33\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x36\a"+
		"(\x2\x2\x36\x5\x3\x2\x2\x2\x37\x38\x5&\x14\x2\x38;\a\r\x2\x2\x39:\a\x1F"+
		"\x2\x2:<\x5\"\x12\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<=\x3\x2\x2\x2=>\a"+
		"(\x2\x2>\a\x3\x2\x2\x2?@\x5&\x14\x2@\x41\a\r\x2\x2\x41\x43\a$\x2\x2\x42"+
		"\x44\x5\n\x6\x2\x43\x42\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x45\x3\x2"+
		"\x2\x2\x45\x46\a%\x2\x2\x46G\x5 \x11\x2G\t\x3\x2\x2\x2HM\x5\f\a\x2IJ\a"+
		")\x2\x2JL\x5\f\a\x2KI\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2"+
		"\x2\x2N\v\x3\x2\x2\x2OM\x3\x2\x2\x2PQ\x5&\x14\x2QR\a\r\x2\x2R\r\x3\x2"+
		"\x2\x2S[\x5\x10\t\x2T[\x5\x12\n\x2U[\x5\x14\v\x2V[\x5\x1E\x10\x2WX\x5"+
		"\"\x12\x2XY\a(\x2\x2Y[\x3\x2\x2\x2ZS\x3\x2\x2\x2ZT\x3\x2\x2\x2ZU\x3\x2"+
		"\x2\x2ZV\x3\x2\x2\x2ZW\x3\x2\x2\x2[\xF\x3\x2\x2\x2\\]\a\r\x2\x2]^\t\x2"+
		"\x2\x2^_\x5\"\x12\x2_`\a(\x2\x2`\x11\x3\x2\x2\x2\x61\x62\a\b\x2\x2\x62"+
		"\x63\a$\x2\x2\x63\x64\x5\"\x12\x2\x64\x65\a%\x2\x2\x65h\x5 \x11\x2\x66"+
		"g\a\t\x2\x2gi\x5 \x11\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2i\x13\x3\x2\x2"+
		"\x2jk\a\n\x2\x2kl\a$\x2\x2lm\x5\x16\f\x2mn\a(\x2\x2no\x5\x18\r\x2op\a"+
		"(\x2\x2pq\x5\x1A\xE\x2qr\a%\x2\x2rs\x5 \x11\x2s{\x3\x2\x2\x2tu\a\v\x2"+
		"\x2uv\a$\x2\x2vw\x5\"\x12\x2wx\a%\x2\x2xy\x5 \x11\x2y{\x3\x2\x2\x2zj\x3"+
		"\x2\x2\x2zt\x3\x2\x2\x2{\x15\x3\x2\x2\x2|\x80\x5\x6\x4\x2}\x80\x5\x10"+
		"\t\x2~\x80\x5\x1C\xF\x2\x7F|\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F~\x3\x2\x2"+
		"\x2\x80\x17\x3\x2\x2\x2\x81\x82\x5\"\x12\x2\x82\x19\x3\x2\x2\x2\x83\x86"+
		"\x5\x1C\xF\x2\x84\x86\x5\"\x12\x2\x85\x83\x3\x2\x2\x2\x85\x84\x3\x2\x2"+
		"\x2\x86\x1B\x3\x2\x2\x2\x87\x88\a\r\x2\x2\x88\x90\a\x14\x2\x2\x89\x8A"+
		"\a\r\x2\x2\x8A\x90\a\x15\x2\x2\x8B\x8C\a\x14\x2\x2\x8C\x90\a\r\x2\x2\x8D"+
		"\x8E\a\x15\x2\x2\x8E\x90\a\r\x2\x2\x8F\x87\x3\x2\x2\x2\x8F\x89\x3\x2\x2"+
		"\x2\x8F\x8B\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x1D\x3\x2\x2\x2\x91\x93"+
		"\a\f\x2\x2\x92\x94\x5\"\x12\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2"+
		"\x94\x95\x3\x2\x2\x2\x95\x96\a(\x2\x2\x96\x1F\x3\x2\x2\x2\x97\x9C\a&\x2"+
		"\x2\x98\x9B\x5\xE\b\x2\x99\x9B\x5\x6\x4\x2\x9A\x98\x3\x2\x2\x2\x9A\x99"+
		"\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2"+
		"\x2\x9D\x9F\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA0\a\'\x2\x2\xA0!\x3"+
		"\x2\x2\x2\xA1\xA6\x5$\x13\x2\xA2\xA3\t\x3\x2\x2\xA3\xA5\x5$\x13\x2\xA4"+
		"\xA2\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2"+
		"\x2\x2\xA7\xAB\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAB\x5\x1C\xF\x2\xAA"+
		"\xA1\x3\x2\x2\x2\xAA\xA9\x3\x2\x2\x2\xAB#\x3\x2\x2\x2\xAC\xC2\a\r\x2\x2"+
		"\xAD\xC2\a\xE\x2\x2\xAE\xC2\a\xF\x2\x2\xAF\xB0\a$\x2\x2\xB0\xB1\x5\"\x12"+
		"\x2\xB1\xB2\a%\x2\x2\xB2\xC2\x3\x2\x2\x2\xB3\xB4\a\r\x2\x2\xB4\xBD\a$"+
		"\x2\x2\xB5\xBA\x5\"\x12\x2\xB6\xB7\a)\x2\x2\xB7\xB9\x5\"\x12\x2\xB8\xB6"+
		"\x3\x2\x2\x2\xB9\xBC\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2"+
		"\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD\xB5\x3\x2\x2\x2\xBD\xBE"+
		"\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC2\a%\x2\x2\xC0\xC2\x5\x1C\xF\x2"+
		"\xC1\xAC\x3\x2\x2\x2\xC1\xAD\x3\x2\x2\x2\xC1\xAE\x3\x2\x2\x2\xC1\xAF\x3"+
		"\x2\x2\x2\xC1\xB3\x3\x2\x2\x2\xC1\xC0\x3\x2\x2\x2\xC2%\x3\x2\x2\x2\xC3"+
		"\xC4\t\x4\x2\x2\xC4\'\x3\x2\x2\x2\x16*,\x33;\x43MZhz\x7F\x85\x8F\x93\x9A"+
		"\x9C\xA6\xAA\xBA\xBD\xC1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace HecateCompiler
